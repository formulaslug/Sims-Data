# Vibecoded lol. hopefully this works
import numpy as np
from scipy.interpolate import interp1d

def getFriction(x_input):
    # Hardcoded (x, y) data points
    data = [
        (123.30934570415768, 0.28980684240521937),
        (129.1956165234812, 0.2921312625649321),
        (136.09859265014873, 0.295881802690183),
        (142.62674654369405, 0.29813718371352277),
        (149.15490043723935, 0.30117446184611313),
        (155.68305433078467, 0.303438330680018),
        (162.21120822433, 0.3077195823290191),
        (168.73936211787532, 0.31088519615735266),
        (175.26751601142064, 0.31409358855093406),
        (181.79566990496596, 0.31721642381401993),
        (188.32382379851128, 0.32042481620760127),
        (194.8519776920566, 0.3236332086011826),
        (201.23176445165768, 0.3266669218533357),
        (207.9082854791472, 0.3300072148230976),
        (214.43643937269252, 0.3332156072166789),
        (220.96459326623784, 0.3363384424797648),
        (228.0014344761633, 0.33992002692826934),
        (233.46452430103767, 0.34245813267762504),
        (240.5490549468738, 0.34636390480675566),
        (247.07720884041913, 0.3491292334888425),
        (253.60536273396445, 0.35212373305618505),
        (260.38079518408347, 0.3543965989692888),
        (265.90084643289, 0.3583892617449664),
        (273.18982441460037, 0.3618344673674247),
        (279.7179783081457, 0.36504285976100603),
        (286.246132201691, 0.3682084735893396),
        (292.77428609523633, 0.37141686598292095),
        (299.4393942662686, 0.37513201984174493),
        (305.830593882327, 0.37774809363958817),
        (312.3587477758723, 0.38095648603316956),
        (318.8869016694176, 0.38412209986150314),
        (325.41505556296295, 0.38733049225508454),
        (331.94320945650827, 0.3919830686406847),
        (337.91745938332855, 0.39395200303307587),
        (344.9995172435989, 0.39736206580568223),
        (351.5276711371442, 0.40003572613366667),
        (358.0558250306895, 0.40270938646165116),
        (365.7799274486095, 0.40671140939597306),
        (371.7049576783555, 0.4093959731543623),
        (377.6402867113255, 0.41274096001224886),
        (384.1684406048708, 0.41594935240583025),
        (390.6965944984161, 0.4190294091036683),
        (397.22474839196144, 0.42163890158378114),
        (403.75290228550676, 0.42424839406389403),
        (410.28105617905203, 0.4260023152390518),
        (416.80921007259735, 0.4279701292404484),
        (423.3373639661427, 0.4296812718503584),
        (429.865517859688, 0.4313924144602685),
        (436.3936717532333, 0.4328896642439398),
        (442.92182564677864, 0.4343869140276111),
        (449.44997954032397, 0.4356702709850437),
        (455.9781334338693, 0.4368680708119807),
        (462.5062873274146, 0.4379803135084222),
        (469.03444122095993, 0.43883588481337726),
        (475.5625951145052, 0.43947756329209353),
        (482.0907490080505, 0.439220891900607),
        (488.61890290159585, 0.4379803135084222),
        (495.14705679514117, 0.43652584228999863),
        (501.5382564111995, 0.4364501571360988),
        (508.2033645822318, 0.43344578559216057),
        (514.7315184757771, 0.4318629786779938),
        (521.2596723693224, 0.4301518360680837),
        (527.7878262628677, 0.42844069345817365),
        (534.315980156413, 0.4266867722830158),
        (540.8441340499584, 0.42497562967310576),
        (547.3722879435037, 0.4230933728022047),
        (553.900441837049, 0.42121111593130367),
        (560.4285957305943, 0.4192860804951548),
        (566.9567496241397, 0.41727548792851055),
        (573.484903517685, 0.41505100253562743),
        (580.0130574112303, 0.41355375275195616),
        (586.5412113047756, 0.4127837385774966),
        (593.069365198321, 0.4121848386640281),
        (599.6964305144957, 0.41211354105528186),
        (610.2799527358495, 0.4113292673590731),
        (616.8081066293948, 0.4109442602718433),
        (623.9419588875454, 0.41073825503355693),
        (629.8644144164855, 0.410644810315109),
        (636.3925683100308, 0.4103881389236225),
        (642.9207222035761, 0.4103881389236225),
        (649.4488760971213, 0.4103881389236225),
        (655.9770299906667, 0.4103881389236225),
        (662.505183884212, 0.41034536035837477),
        (669.0333377777573, 0.4097036818796585),
        (675.5743651753326, 0.4093959731543623),
        (682.3458282950423, 0.4080536912751677),
        (689.1172914147522, 0.4080536912751677),
        (695.888754534462, 0.40671140939597306),
        (700.9673518742444, 0.40671140939597306),
        (708.2022611390292, 0.40489346987624475),
        (714.7304150325746, 0.40441339931068654),
        (721.2585689261199, 0.4040735473756628),
        (727.7867228196652, 0.4035435684839823),
        (734.3148767132105, 0.40315856139675255),
        (740.8430306067559, 0.4028591114400183),
        (747.3711845003012, 0.4025168829180363),
        (753.8993383938465, 0.402388547222293),
        (760.4274922873918, 0.40191798300456777),
        (766.9556461809372, 0.4018324258740723),
        (773.4838000744825, 0.4014474187868425),
        (780.0119539680277, 0.4010624116996127),
        (786.540107861573, 0.40097685456911725),
        (793.0682617551183, 0.40050629035139196),
        (798.9370061644672, 0.40050629035139196),
    ]

    # Split into x and y
    x_vals, y_vals = zip(*sorted(data))
    x_array = np.array(x_vals)
    y_array = np.array(y_vals)

    # Create interpolation function with bounds handling
    interpolator = interp1d(x_array, y_array, bounds_error=False, fill_value=(y_array[0], y_array[-1]))

    return float(interpolator(x_input))
